year = '2018'

# Your project dependencies are delivered as NuGet packages.
# .NETBuilder defaults to download these packages to your repo's working directory. The design ensures 
# that all changes are made inside the repo's directory, and .NETBuild does not touch anything else on your 
# system. 
# However, the downside is that this can quickly eat a lot of disk space when you have multiple repos, because 
# when two different repos have the same dependency package, that package will be downloaded twice to each repo's working 
# directory.
# You can override overcome this by explicitly setting where NuGet packages should be saved on your system. The setting below 
# will save packages to 'packages/oneget' under the repo's drive root (e.g. 'E:\packages\oneget')
#pkgDir = ${rootDir}'packages/oneget'

# Credential files are used to publish your build to NuGet repositories. Its contents are set to be ignored by the '.gitignore'
# file, so you don't accidentally expose your credentials.
# The credential directory path lives in the repo's 'credential' folder by default. You can set it explicitly here.
#credDir = ${rootDir}'Credentials/lizoc'

# ------------------
# Tooling
# ------------------
# .NET Core 2.1.4
# https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4-download.md

# these are win64 binaries
dotnetSdkUrl = 'https://download.microsoft.com/download/8/A/7/8A765126-50CA-4C6F-890B-19AE47961E4B/dotnet-sdk-2.1.402-win-x64.zip'
dotnetRuntimeUrl = 'https://download.microsoft.com/download/A/7/8/A78F1D25-8D5C-4411-B544-C7D527296D5E/dotnet-runtime-2.1.4-win-x64.zip'

# The .NETCore SDK is needed to build your code.
# Similarly to how .NETBuilder manages your NuGet packages, the default behavior is to download the sdk into the repo working directory, 
# which means it will install a copy of the same SDK in each repo that is on your local system. By specifying a custom location below, 
# all repos will share the same SDK.
# The SDK archive is about 150mb, which will be downloaded to the repo's temp directory. it then needs to be expanded to the sdk directory below, 
# consuming about 1.3gb. 
# You can safely delete the SDK archive manually in the repo's temp directory. It won't be downloaded again unless it cannot find the directory below.
dotnetSdkDir = ${rootDir}'packages/dotnetsdk'

# ------------------
# Git and CI
# ------------------
gitUser = '{{ $userName }}'
gitServerUrl = 'https://www.github.com'
docServerUrl = 'http://'${gitUser}'.github.io'

# ------------------
# Version management
# ------------------
versioning {
    major = 1
    minor = 0
    revision = 0
    
    # Default value is 'beta'. You should set it to '' or comment out when releasing a production build
    suffix = 'beta'

    # The 'build' property takes its value from either 'release-build' or 'debug-build', depending on the configuration.

    # Build number to use when configuration is 'release'
    # Use 'auto' to autoincrement with every build
    release-build = 0

    # Build number to use when configuration is 'debug'
    # Use 'auto' to autoincrement with every build
    #debug-build = auto
}

# ------------------
# Branding
# ------------------
repoFullName = '{{ $repoFullName }}'
company = '{{ $userName }}'
product = '{{ $repoFullName }}'
authors = [ '{{ $userName }}' ]
trademark = '{{ $userName }}'
# required by copyright header
website = ${docServerUrl}
license = 'MIT'
# The copyright header is applied to all files matching the wildcards under each project's directory in the working folder.
copyrightHeader {
    'Source/*.cs' {
        # header must appear at beginning of file => ^
        # first line: `//`, optional whitespaces, then repeating `-` => (//)(\s)*(-)+
        # newline: `\r\n` or `\n` => ((\r){0,1}(\n))
        # second line: `//`, optional whitespaces, `<copyright`, any chars except line break, then `>` => (//)(\s)*(<copyright)(.)*(>)
        # second line continue: any chars and line breaks => (.|\n)*
        # second last line: `//`, optional whitespaces, `</copyright>`, then newline => (//)(\s)*(</copyright>)((\r){0,1}(\n))
        # last line: `//`, optional whitespaces, then repeating `-`, then repeating whitespace and newlines => (//)(\s)*(-)+(\s|\n)*
        find = '^(//)(\\s)*(-)+((\\r){0,1}(\\n))(//)(\\s)*(<copyright)(.)*(>)(.|\\n)*(//)(\\s)*(</copyright>)((\\r){0,1}(\\n))(//)(\\s)*(-)+(\\s|\\n)*'
        replace = '''// -----------------------------------------------------------------------
// <copyright file="${filename}" repo="'''${repoFullName}'''">
//     Copyright (C) '''${year}''' '''${company}''' <'''${website}'''>
//     The source code in this file is subject to the '''${license}''' license.
//     See the LICENSE file in the repository root directory for more information.
// </copyright>
// -----------------------------------------------------------------------

'''
        recurse = true
    }
}

# ------------------
# Security
# ------------------
# Strongly signed assemblies is mainly for the full .NET framework. 
# You need to generate a '.snk' file using the .NET tools, and place it under the path below.
#strongNameKey {
#    testsign {
#        path = ${credDir}'/testsign.snk'
#        token = 'xxx'
#        hash = 'yyy'
#    }
#}

# ------------------
# Nuget
# ------------------
package {
    source {
        'nuget.org' {
            url = 'https://api.nuget.org/v3/index.json'
            apiSchema = 'oneget'
            apiVersion = 3

            #disabled = false
            #apikey = ''
            #username = ''
            #password = ''
        }
    }
    output {
        nuget {
            tags = ['{{ $userName }}']
            owners = ['{{ $userName }}']
            sourceCodeUrl = ${gitServerUrl}'/'${gitUser}'/'${repoName}
            projectUrl = ${docServerUrl}'/'${repoName}
            licenseUrl = ${package.output.nuget.projectUrl}'/license'
            releaseNotesUrl = ${package.output.nuget.projectUrl}'/releasenotes'
            iconUrl = ${package.output.nuget.projectUrl}'/icon.png'
            requireLicenseAcceptance = false
            files {
                '/' = [
                    ${repoDir}'/LICENSE'
                    ${repoDir}'/THIRD-PARTY-LICENSE.txt'
                    ${repoDir}'/README.md'
                    ${repoDir}'/icon.png'
                ]
            }
        }
    }
    publish {
        'nuget.org' {
            apiSchema = 'oneget'
            url = 'https://www.nuget.org/api/v2/package'
            symbols = true
            #symbolsUrl = ''
            timeout = 60
            #disabled = false
        }
    }
}

# ------------------
# Global templates
# ------------------
templates {
    'nuget.config' {
        path = ${toolsDir}'/DotNetBuilder/nuget.config.tmpl1'
        outputPath = 'nuget.config'
        outputBasePath = 'workingSourceDir'
        global = true
    }
    'Message.resx' {
        path = ${toolsDir}'/DotNetBuilder/Message.resx.tmpl1'
        outputPath = 'Resource/Message.resx'
        outputBasePath = 'projectDir'
    }
}
