{{- $publicProperties = $projectDir | concat '/Properties/StringData.txt' | include -Encoding UTF8 | stringdata -}}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Globalization;
using System.Collections.Generic;
using System.Resources;
using System.Threading;
using System.Reflection;
using System.Diagnostics;

namespace {{ $rootNamespace }}
{
    internal static class RS
    {
        private const int MaxMessageLength = 1021;
        private const string TruncateTail = "...";
        private static ResourceManager _resourceMan;
        private static CultureInfo _culture;
        private static string MessageResourceName = "Resource.Message";

        /// <summary>
        /// Overrides the current thread's CurrentUICulture property for all
        /// resource lookups using this strongly typed resource class.
        /// </summary>
        internal static CultureInfo Culture
        {
            get { return _culture; }
            set { _culture = value; }
        }

        public static ResourceManager ResourceManager
        {
            get 
            {
                if (object.ReferenceEquals(_resourceMan, null)) 
                {
                    ResourceManager temp = new ResourceManager(RS.GetMessageResourceName(), RS.GetExecutingAssembly());
                    _resourceMan = temp;
                }

                return _resourceMan;
            }
        }

        public static string[] Resources
        {
            get 
            {
                return GetExecutingAssembly().GetManifestResourceNames();
            }
        }

        public static bool IsCultureSupported(string testCulture)
        {
            return IsCultureSupported(RS.GetCulture(testCulture));
        }

        public static bool IsCultureSupported(CultureInfo testCulture)
        {
            return GetSupportedCultures(new CultureInfo[] { testCulture }).Length != 0;
        }

        public static CultureInfo[] GetSupportedCultures()
        {
            return GetSupportedCulturesInternal(null, true);
        }

        public static CultureInfo[] GetSupportedCultures(string[] testCulture)
        {
            List<CultureInfo> cultures = new List<CultureInfo>();
            foreach (string culture in testCulture)
            {
                cultures.Add(RS.GetCulture(culture));
            }

            return GetSupportedCultures(cultures.ToArray());
        }

        public static CultureInfo[] GetSupportedCultures(CultureInfo[] testCulture)
        {
            return GetSupportedCulturesInternal(testCulture);
        }

        public static string GetString(string name, params object[] args)
        {
            // resman will return null if name is not found.
            string str;

            str = null;

            if (str == null)
            {
                string embedName;
                string embedNameFallback;
                if (Culture != null)
                {
                    embedName = name + "_" + Culture.Name.Replace("-", "_").ToLowerInvariant();
                    embedNameFallback = name + "_" + Culture.TwoLetterISOLanguageName.ToLowerInvariant();
                }
                else
                {
                    embedName = name + "_" + CultureInfo.CurrentUICulture.Name.Replace("-", "_").ToLowerInvariant();
                    embedNameFallback = name + "_" + CultureInfo.CurrentUICulture.TwoLetterISOLanguageName.ToLowerInvariant();                    
                }

                str = ResourceManager.GetString(embedName, CultureInfo.InvariantCulture);

                if (str == null)
                    str = ResourceManager.GetString(embedNameFallback, CultureInfo.InvariantCulture);

                if (str == null)
                    str = ResourceManager.GetString(name + "_en_us", CultureInfo.InvariantCulture);

                if (str == null)
                    str = ResourceManager.GetString(name + "_en", CultureInfo.InvariantCulture);
            }

            if (str == null)
                return null;

            if (args != null && args.Length != 0)
            {
                for (int i = 0; i < args.Length; i++)
                {
                    string text = args[i] as string;
                    if (text != null && text.Length > MaxMessageLength + 3)
                        args[i] = text.Substring(0, MaxMessageLength) + TruncateTail;
                }

                if (Culture != null)
                    return string.Format(Culture, str, args);
                else
                    return string.Format(CultureInfo.CurrentCulture, str, args);
            }
            else
            {
                return str;
            }
        }

        public static string GetString(string name)
        {
            return GetString(name, null);
        }

        public static object GetObject(string name)
        {
#if NETSTANDARD
            throw new NotImplementedException();
#else
            if (Culture != null)
                return ResourceManager.GetObject(name, Culture);
            else
                return ResourceManager.GetObject(name);
#endif
        }

        private static CultureInfo[] GetSupportedCulturesInternal(CultureInfo[] testCulture, bool getAll = false)
        {
#if NETSTANDARD
            throw new NotImplementedException();
#else
            if (getAll == true)
                testCulture = CultureInfo.GetCultures(CultureTypes.AllCultures);

            ResourceManager rm = new ResourceManager(RS.GetMessageResourceName(), RS.GetExecutingAssembly());

            List<CultureInfo> supportedCultures = new List<CultureInfo>();
            foreach (CultureInfo culture in testCulture)
            {
                try
                {
                    ResourceSet resSet = ResourceManager.GetResourceSet(culture, true, false);
                    if (resSet != null)
                       supportedCultures.Add(culture);
                }
                catch (CultureNotFoundException)
                {
                }
            }

            return supportedCultures.ToArray();           
#endif
        }

        private static Assembly GetExecutingAssembly()
        {
#if NETSTANDARD
            return typeof(RS).GetTypeInfo().Assembly;
#else
            return Assembly.GetExecutingAssembly();
#endif
        }

        private static CultureInfo GetCulture(string name)
        {
#if NETSTANDARD
            return new CultureInfo(name);
#else
            return CultureInfo.CreateSpecificCulture(name);
#endif
        }

        private static string GetMessageResourceName()
        {
            return GetExecutingAssembly().GetName().Name + "." + MessageResourceName;
        }

        #region Culture strings
{{ $publicProperties | where { $_ -ne $null } | % { }}
        /// <summary>
        /// {{ (($_.value -split "`n")[0] | % { ($_ -split "`r")[0] }) | xmltext }}
        /// </summary>
        public static string {{ $_.name | uppercase -First 1 }}
        {
            get { return GetString("{{ $_.name | lowercase -First 1 }}"); }
        }
{{ } }}    
        #endregion /Culture strings
    }
}
