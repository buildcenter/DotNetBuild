{{-
  level1_sep = '^n  '
  level2_sep = '^n    '
  level2_last_sep = '^n  '
  level3_sep = '^n      '
  level3_last_sep = '^n    '
-}}
<Project>
  <!-- 
    Auto Generated
    ==============
    This code was generated by a tool.
    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.

    Reference
    =========
    + https://docs.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-properties
    + https://docs.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-items 

    Notes
    =====
    We avoid <Project SDK="Microsoft.NET.Sdk"> because dotnet test will have a problem with custom "BaseOutputPath" 
    and "BaseIntermediateOutputPath".
    + https://github.com/dotnet/sdk/issues/980#issuecomment-285957284
  -->

  <!-- SDK customization -->
  <PropertyGroup>
    <BaseOutputPath>{{ baseOutputPath | html.xmltext }}</BaseOutputPath>
    <BaseIntermediateOutputPath>{{ baseIntermediateOutputPath | html.xmltext }}</BaseIntermediateOutputPath>
  </PropertyGroup>
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <!-- Assembly metadata -->
  <PropertyGroup>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
  </PropertyGroup>
  <PropertyGroup>
    <AssemblyName>{{ assemblyName | html.xmltext }}</AssemblyName>
  </PropertyGroup>
  <PropertyGroup>
    <VersionPrefix>{{ assemblyVersion | html.xmltext }}</VersionPrefix>
    <VersionSuffix>{{ assemblyVersionSuffix | html.xmltext }}</VersionSuffix>
  </PropertyGroup>
  <PropertyGroup>
    <Authors>{{ authors | array.join ';' | html.xmltext }}</Authors>
    <Company>{{ company | html.xmltext }}</Company>
    <NeutralLanguage>en-US</NeutralLanguage>
    <AssemblyTitle>{{ assemblyTitle | html.xmltext }}</AssemblyTitle>
    <Description>{{ assemblyDescription | html.xmltext }}</Description>
    <Copyright>{{ copyright | html.xmltext }}</Copyright>
  </PropertyGroup>

{{- level1_sep -}}
{{-
  if userSecretsId != empty
-}}
  <!-- User secret ID -->
  <PropertyGroup>
    <UserSecretsId>{{ userSecretsId | html.xmltext }}</UserSecretsId>
  </PropertyGroup>
{{-
  end
-}}

{{- level1_sep -}}
{{-
  if rootNamespace != empty
-}}
  <!-- Root namespace -->
  <PropertyGroup>
    <RootNamespace>{{ rootNamespace | html.xmltext }}</RootNamespace>
  </PropertyGroup>
{{-
  end
-}}

{{- level1_sep -}}
{{-
  if targetOS != empty
-}}
  <!-- Runtime ID -->
  <PropertyGroup>
    <RuntimeIdentifiers>{{ targetOS | array.join ';' | html.xmltext }}</RuntimeIdentifiers>
  </PropertyGroup>
{{-
  end
-}}

{{- level1_sep -}}
{{-
  vs_integrated_fx = []
  for fx in (frameworks | object.keys)
    if ((frameworks[fx] | object.has_key 'disableVisualStudioIntegration') && (frameworks[fx].disableVisualStudioIntegration == true))
    else
      vs_integrated_fx = vs_integrated_fx | array.add fx
    end
  end
-}}
  <!-- Target frameworks -->
  <PropertyGroup Condition="'$(BuildingInsideVisualStudio)'=='true'">
    <TargetFrameworks>{{ vs_integrated_fx | array.join ';' | html.xmltext }}</TargetFrameworks>
  </PropertyGroup>
  <PropertyGroup Condition="'$(BuildingInsideVisualStudio)'!='true'">
    <TargetFrameworks>{{ frameworks | object.keys | array.join ';' | html.xmltext }}</TargetFrameworks>
  </PropertyGroup>

  <!-- Dependency .NET build tools -->
  <ItemGroup>
{{-
  item_found = false
  for dep in (dependencies | object.keys)
    if dependencies[dep].type == 'build-tool'
      item_found = true
-}}
    {{- level2_sep -}}
    <DotNetCliToolReference Include="{{ dep | html.xmlattrib }}" Version="{{ dependencies[dep].version | html.xmlattrib }}" />
{{-
    end
  end
-}}
  {{- item_found | string.bool level2_last_sep '' -}}
  </ItemGroup>

  <!-- Dependency projects -->
  <ItemGroup>
{{-
  item_found = false
  for dep in (dependencies | object.keys)
    if dependencies[dep].type == 'project'
      item_found = true
      makefile_extension = dependencies[dep].makeFileExtension | string.replace_empty compiler.makeFileExtension
      makefile_name = dep + makefile_extension
      makefile_default_path = workingSourceRelativeDir + '/' + dep + '/' + makefile_name
-}}
    {{- level2_sep -}}
    <ProjectReference Include="{{ dependencies[dep].path | string.replace_empty makefile_default_path | html.xmlattrib }}" />  
{{-
    end
  end
-}}
  {{- item_found | string.bool level2_last_sep '' -}}
  </ItemGroup>

{{-
  if (dependencies | object.has_key 'NETStandard.Library')
    if dependencies['NETStandard.Library'].type == 'package'
-}}
  {{- level1_sep -}}
  <!-- NETStandard.Library package -->
  <PropertyGroup>
    <NetStandardImplicitPackageVersion>{{ dependencies['NETStandard.Library'].version | html.xmltext }}</NetStandardImplicitPackageVersion>
  </PropertyGroup>
{{-
    end
  end
-}}

{{-
  if (dependencies | object.has_key 'Microsoft.NETCore.App')
    if dependencies['Microsoft.NETCore.App'].type == 'package'
-}}
  {{- level1_sep -}}
  <!-- Microsoft.NETCore.App package -->
  <PropertyGroup>
    <RuntimeFrameworkVersion>{{ dependencies['Microsoft.NETCore.App'].version | html.xmltext }}</RuntimeFrameworkVersion>
  </PropertyGroup>
{{-
    end
  end
-}}

  {{- level1_sep -}}
  {{- level1_sep -}}
  <!-- Dependency packages including dev packages -->
  <ItemGroup>
{{-
  item_found = false
  dependency_configurations = []
  for dep in (dependencies | object.keys)
    is_pkg = (dependencies[dep].type == 'package' || dependencies[dep].type == 'dev-package')
    is_platform_pkg = (dep == 'NETStandard.Library' || dep == 'Microsoft.NETCore.App')
    is_cfg_specific = (dependencies[dep].configuration != empty && dependencies[dep].configuration != '*')

    if (is_pkg == true && is_platform_pkg == false && is_cfg_specific == true)
      dependency_configurations = dependency_configurations | array.add dependencies[dep].configuration
    end

    if (is_pkg == true && is_platform_pkg == false && is_cfg_specific == false)
      item_found = true
-}}
{{-
      if dependencies[dep].type == 'dev-package'
-}}
    {{- level2_sep -}}
    <PackageReference Include="{{ dep | html.xmlattrib }}" Version="{{ dependencies[dep].version | html.xmlattrib }}" PrivateAssets="All" />
{{-
      else
-}}
    {{- level2_sep -}}
    <PackageReference Include="{{ dep | html.xmlattrib }}" Version="{{ dependencies[dep].version | html.xmlattrib }}" />
{{-
      end
-}}
{{-
    end
  end

  dependency_configurations = dependency_configurations | array.uniq
-}}
  {{- item_found | string.bool level2_last_sep '' -}}
  </ItemGroup>

{{-
  for dep_cfg in dependency_configurations
-}}
  {{- level1_sep -}}
  {{- level1_sep -}}
  <!-- Dependency packages including dev packages in {{ dep_cfg }} configuration -->
  <ItemGroup Condition="'$(Configuration)'=='{{ dep_cfg | string.capitalize }}'">
{{-
    item_found = false
    for dep in (dependencies | object.keys)
      is_pkg = (dependencies[dep].type == 'package' || dependencies[dep].type == 'dev-package')
      is_platform_pkg = (dep == 'NETStandard.Library' || dep == 'Microsoft.NETCore.App')
      is_cfg_specific = (dependencies[dep].configuration != empty && dependencies[dep].configuration != '*')

      if (is_pkg == true && is_platform_pkg == false && is_cfg_specific == true && dependencies[dep].configuration == dep_cfg)
        item_found = true
-}}
{{-
        if dependencies[dep].type == 'dev-package'
-}}
    {{- level2_sep -}}
    <PackageReference Include="{{ dep | html.xmlattrib }}" Version="{{ dependencies[dep].version | html.xmlattrib }}" PrivateAssets="All" />
{{-
        else
-}}
    {{- level2_sep -}}
    <PackageReference Include="{{ dep | html.xmlattrib }}" Version="{{ dependencies[dep].version | html.xmlattrib }}" />
{{-
        end
-}}
{{-
      end
    end
-}}
  {{- item_found | string.bool level2_last_sep '' -}}
</ItemGroup>
{{-
  end
-}}

{{-
  if (scripts != empty)
-}}
  {{- level1_sep -}}
  {{- level1_sep -}}
  <!-- Scripts -->
  <Target Name="PreCompile" BeforeTargets="Build">
{{-
    for script in scripts.preCompile 
-}}
    {{- level2_sep -}}
    <Exec Command="{{ script | html.xmlattrib }}" />
    {{- for.last | string.bool level2_last_sep '' -}}
{{-
    end 
-}}
  </Target>
  <Target Name="PostCompile" AfterTargets="Build">
{{- 
    for script in scripts.postCompile 
-}}
    {{- level2_sep -}}
    <Exec Command="{{ script | html.xmlattrib }}" />
    {{- for.last | string.bool level2_last_sep '' -}}
{{- 
    end 
-}}
  </Target>
  <Target Name="PrePublish" BeforeTargets="Publish">
{{- 
    for script in scripts.prePublish 
-}}
    {{- level2_sep -}}
    <Exec Command="{{ script | html.xmlattrib }}" />
    {{- for.last | string.bool level2_last_sep '' -}}
{{- 
    end 
-}}
  </Target>
  <Target Name="PostPublish" BeforeTargets="Publish">
{{-
    for script in scripts.postPublish 
-}}
    {{- level2_sep -}}
    <Exec Command="{{ script | html.xmlattrib }}" />
    {{- for.last | string.bool level2_last_sep '' -}}
{{- 
    end 
-}}
  </Target>
{{-
  end
-}}

{{-
  if vm != empty 
-}}
  {{- level1_sep -}}
  {{- level1_sep -}}
  <!-- Runtime options -->
  <PropertyGroup>
{{-
    if (vm | object.has_key 'serverGarbageCollection') 
-}}
    {{- level2_sep -}}
    <ServerGarbageCollection>{{ vm.serverGarbageCollection | string.bool 'true' 'false' }}</ServerGarbageCollection>
{{-
    end 
-}}
{{-
    if (vm | object.has_key 'concurrentGarbageCollection') 
-}}
    {{- level2_sep -}}
    <ConcurrentGarbageCollection>{{ vm.concurrentGarbageCollection | string.bool 'true' 'false' }}</ConcurrentGarbageCollection>
{{- 
    end 
-}}
{{- 
    if (vm | object.has_key 'retainVMGarbageCollection') 
-}}
    {{- level2_sep -}}
    <RetainVMGarbageCollection>{{ vm.retainVMGarbageCollection | string.bool 'true' 'false' }}</RetainVMGarbageCollection>
{{- 
    end 
-}}
{{- 
    if (vm | object.has_key 'threadPoolMinThreads') 
-}}
    {{- level2_sep -}}
    <ThreadPoolMinThreads>{{ vm.threadPoolMinThreads | html.xmltext }}</ThreadPoolMinThreads>
{{- 
    end 
-}}
{{- 
    if (vm | object.has_key 'threadPoolMaxThreads') 
-}}
    {{- level2_sep -}}
    <ThreadPoolMaxThreads>{{ vm.threadPoolMaxThreads | html.xmltext }}</ThreadPoolMaxThreads>
{{- 
    end 
-}}
    {{- ((vm | object.keys) != empty) | string.bool level2_last_sep '' -}}
  </PropertyGroup>
{{- 
  end 
-}}

  {{- level1_sep -}}
  {{- level1_sep -}}
  <!-- Compiler options -->
  <PropertyGroup>
    <LangVersion>{{ compiler.cslang | string.replace_empty '6' | html.xmltext }}</LangVersion>
    <OutputType>{{ compiler.outputType | string.replace_empty 'Library' | html.xmltext }}</OutputType>
{{-
  if (compiler | object.has_key 'noWarn')
-}}
    {{- level2_sep -}}
    <NoWarn>$(NoWarn);{{ compiler.noWarn | array.join ';' | html.xmltext }}</NoWarn>
{{-
  end 
-}}
{{-
  if (compiler | object.has_key 'constants')
-}}
    {{- level2_sep -}}
    <DefineConstants>$(DefineConstants);{{ compiler.constants | array.join ';' | html.xmltext }}</DefineConstants>
{{-
  end
-}}
{{-
  if (compiler | object.has_key 'xmlDoc') 
-}}
    {{- level2_sep -}}
    <GenerateDocumentationFile>{{ compiler.xmlDoc | string.bool 'true' 'false' }}</GenerateDocumentationFile>
{{- 
  end 
-}}
    {{- level2_sep -}}
    <TreatWarningsAsErrors>{{ compiler.treatWarningsAsErrors | string.bool 'true' 'false' }}</TreatWarningsAsErrors>
    <PreserveCompilationContext>{{ compiler.preserveCompilationContext | string.bool 'true' 'false' }}</PreserveCompilationContext>
    <AllowUnsafeBlocks>{{ compiler.allowUnsafe | string.bool 'true' 'false' }}</AllowUnsafeBlocks>
    <DebugType>{{ compiler.debugSymbolsType | string.replace_empty 'portable' | html.xmltext }}</DebugType>
    <Optimize>{{ compiler.optimize | string.bool 'true' 'false' }}</Optimize>
  </PropertyGroup>

{{-
  if (compiler | object.has_key 'strongNameKey')
-}}
  {{- level1_sep -}}
  <PropertyGroup>
    <AssemblyOriginatorKeyFile>{{ compiler.strongNameKey.path | html.xmltext }}</AssemblyOriginatorKeyFile>
    <SignAssembly>true</SignAssembly>
    <PublicSign Condition="'$(OS)' != 'Windows_NT'">true</PublicSign>
  </PropertyGroup>
{{- 
  end
-}}

{{-
  for cfg in (compiler.configuration | object.keys)
-}}
  {{- level1_sep -}}
  {{- level1_sep -}}
  <!-- Compiler options for {{ cfg }} configuration -->
  <PropertyGroup Condition="('$(Configuration)'=='{{ cfg | html.xmlattrib }}')">
{{-
    if (compiler.configuration[cfg].outputType != empty)
-}}
    {{- level2_sep -}}
    <OutputType>{{ compiler.configuration[cfg].outputType | html.xmltext }}</OutputType>
{{-
    end
-}}
{{-
    if (compiler.configuration[cfg].noWarn != empty)
-}}
    {{- level2_sep -}}
    <NoWarn>$(NoWarn);{{ compiler.configuration[cfg].noWarn | array.join ';' | html.xmltext }}</NoWarn>
{{-
    end
-}}
{{-
    if (compiler.configuration[cfg].constants != empty)
-}}
    {{- level2_sep -}}
    <DefineConstants>$(DefineConstants);{{ compiler.configuration[cfg].constants | array.join ';' | html.xmltext }}</DefineConstants>
{{-
    end
-}}
{{-
    if (compiler.configuration[cfg].debugSymbolsType != empty)
-}}
    {{- level2_sep -}}
    <DebugType>{{ compiler.configuration[cfg].debugSymbolsType | html.xmltext }}</DebugType>
{{-
    end
-}}
{{-
    if (compiler.configuration[cfg].strongNameKey != empty)
-}}
    {{- level2_sep -}}
    <AssemblyOriginatorKeyFile>{{ compiler.configuration[cfg].strongNameKey.path | html.xmltext }}</AssemblyOriginatorKeyFile>
    <SignAssembly>true</SignAssembly>
    <PublicSign Condition="'$(OS)' != 'Windows_NT'">true</PublicSign>
{{-
    end
-}}
{{- 
    if (compiler.configuration[cfg] | object.has_key 'treatWarningsAsErrors') 
-}}
    {{- level2_sep -}}
    <TreatWarningsAsErrors>{{ compiler.configuration[cfg].treatWarningsAsErrors | string.bool 'true' 'false' }}</TreatWarningsAsErrors>
{{- 
    end 
-}}
{{- 
    if (compiler.configuration[cfg] | object.has_key 'preserveCompilationContext') 
-}}
    {{- level2_sep -}}
    <PreserveCompilationContext>{{ compiler.configuration[cfg].preserveCompilationContext | string.bool 'true' 'false' }}</PreserveCompilationContext>
{{- 
    end 
-}}
{{- 
    if (compiler.configuration[cfg] | object.has_key 'xmlDoc') 
-}}
    {{- level2_sep -}}
    <GenerateDocumentationFile>{{ compiler.configuration[cfg].xmlDoc | string.bool 'true' 'false' }}</GenerateDocumentationFile>
{{- 
    end 
-}}
{{- 
    if (compiler.configuration[cfg] | object.has_key 'allowUnsafe') 
-}}
    {{- level2_sep -}}
    <AllowUnsafeBlocks>{{ compiler.configuration[cfg].allowUnsafe | string.bool 'true' 'false' }}</AllowUnsafeBlocks>
{{- 
    end 
-}}
{{- 
    if (compiler.configuration[cfg] | object.has_key 'optimize') 
-}}
    {{- level2_sep -}}
    <Optimize>{{ compiler.configuration[cfg].optimize | string.bool 'true' 'false' }}</Optimize>
{{- 
    end 
-}}
  </PropertyGroup>
{{-
  end
-}}

  {{- level1_sep -}}
  {{- level1_sep -}}
  <!-- Pack options -->
  <PropertyGroup>
    <PackageId>{{ assemblyName | html.xmltext }}</PackageId>
{{-
  if ((package | object.typeof) == 'object') && ((package.output | object.typeof) == "object") && ((package.output.nuget | object.typeof) == "object")
-}}
    {{- level2_sep -}}
    <PackageTags>{{ package.output.nuget.tags | array.join ';' | html.xmltext }}</PackageTags>
    <PackageReleaseNotes>{{ package.output.nuget.releaseNotesUrl | html.xmltext }}</PackageReleaseNotes>
    <PackageIconUrl>{{ package.output.nuget.iconUrl | html.xmltext }}</PackageIconUrl>
    <PackageProjectUrl>{{ package.output.nuget.projectUrl | html.xmltext }}</PackageProjectUrl>
    <PackageLicenseUrl>{{ package.output.nuget.licenseUrl | html.xmltext }}</PackageLicenseUrl>
    <PackageRequireLicenseAcceptance>{{ package.output.nuget.requireLicenseAcceptance | string.bool 'true' 'false' }}</PackageRequireLicenseAcceptance>
    <RepositoryType>git</RepositoryType>
    <RepositoryUrl>{{ package.output.nuget.sourceCodeUrl | html.xmltext }}</RepositoryUrl>
{{-
  end
-}}
  {{- level2_last_sep -}}
  </PropertyGroup>

  <!-- Files -->
  <PropertyGroup>
    <EnableDefaultItems>false</EnableDefaultItems>
  </PropertyGroup>
  <ItemGroup>
{{-
  item_found = false
  for filename in (files | object.keys)
    if files[filename].type != 'template'
      item_found = true
-}}
{{-
      if (files[filename].exclude == empty)
-}}
    {{- level2_sep -}}
    <{{ files[filename].type | string.capitalize | html.xmlattrib }} Include="{{ filename | html.xmlattrib }}">
{{-
      else
-}}
    {{- level2_sep -}}
    <{{ files[filename].type | string.capitalize | html.xmlattrib }} Include="{{ filename | html.xmlattrib }}" Exclude="{{ files[filename].exclude | html.xmlattrib }}">
{{-
      end
-}}
{{-
      if (files[filename].dependsOn != empty)
-}}
      {{- level3_sep -}}
      <DependentUpon>{{ files[filename].dependsOn | html.xmltext }}</DependentUpon>
      {{- level3_last_sep -}}
{{-
      end
-}}
    </{{ files[filename].type | string.capitalize | html.xmlattrib }}>
{{-
    end
  end
-}}
  {{- item_found | string.bool level2_last_sep '' -}}
  </ItemGroup>
  <ItemGroup>
{{-
  item_found = false
  if ((package | object.typeof) == 'object') && ((package.output | object.typeof) == 'object') && ((package.output.nuget | object.typeof) == 'object')
    for filename in (package.output.nuget.files | object.keys)
      item_found = true
-}}
    {{- level2_sep -}}
    <Content Include="{{ package.output.nuget.files[filename] | array.join ';' | html.xmlattrib }}">
{{-
      if filename == '/'
-}}
      {{- level3_sep -}}
      <PackagePath></PackagePath>
      <Pack>true</Pack>
{{-
      else
-}}
      {{- level3_sep -}}
      <PackagePath>{{ filename | html.xmltext }}</PackagePath>
      <Pack>true</Pack>
{{-
      end
-}}
    {{- for.last | string.bool level3_last_sep '' -}}
    </Content>
{{-
    end
  end
-}}
  {{- item_found | string.bool level2_last_sep '' -}}
  </ItemGroup>
  <Target Name="CopyStaticFiles" AfterTargets="Build" Condition="'$(TargetDir)'!=''">
    <ItemGroup>
      <StaticOutputFiles0 Include="Static/**" Exclude="" />
    </ItemGroup>
    <Message Text="Copying static resource files to output directory..." Importance="High" />
    <Copy SourceFiles="@(StaticOutputFiles0)" DestinationFolder="$(TargetDir)%(RecursiveDir)" SkipUnchangedFiles="true" />
  </Target>

  <!-- Begin frameworks -->
{{-
  for fx in (frameworks | object.keys)
-}}
{{-
    if frameworks[fx].compiler != empty
-}}
  {{- level1_sep -}}
  {{- level1_sep -}}
  <!-- Compiler options for {{ fx }} framework -->
  <PropertyGroup Condition="'$(TargetFramework)'=='{{ fx | html.xmlattrib }}'">
{{-
      if (frameworks[fx].compiler.outputType != empty)
-}}
    {{- level2_sep -}}
    <OutputType>{{ frameworks[fx].compiler.outputType | html.xmltext }}</OutputType>
{{-
      end
-}}
{{-
      if (frameworks[fx].compiler.noWarn != empty)
-}}
    {{- level2_sep -}}
    <NoWarn>$(NoWarn);{{ frameworks[fx].compiler.noWarn | array.join ';' | html.xmltext }}</NoWarn>
{{-
      end
-}}
{{-
      if (frameworks[fx].compiler.constants != empty)
-}}
    {{- level2_sep -}}
    <DefineConstants>$(DefineConstants);{{ frameworks[fx].compiler.constants | array.join ';' | html.xmltext }}</DefineConstants>
{{-
      end
-}}
{{-
      if (frameworks[fx].compiler.debugSymbolsType != empty)
-}}
    {{- level2_sep -}}
    <DebugType>{{ frameworks[fx].compiler.debugSymbolsType | html.xmltext }}</DebugType>
{{-
      end
-}}
{{-
      if (frameworks[fx].compiler.strongNameKey != empty)
-}}
    {{- level2_sep -}}
    <AssemblyOriginatorKeyFile>{{ frameworks[fx].compiler.strongNameKey.path | html.xmltext }}</AssemblyOriginatorKeyFile>
    <SignAssembly>true</SignAssembly>
    <PublicSign Condition="'$(OS)' != 'Windows_NT'">true</PublicSign>
{{-
      end
-}}
{{-
      if (frameworks[fx].compiler | object.has_key 'treatWarningsAsErrors')
-}}
    {{- level2_sep -}}
    <TreatWarningsAsErrors>{{ frameworks[fx].compiler.treatWarningsAsErrors | string.bool 'true' 'false' }}</TreatWarningsAsErrors>
{{-
      end
-}}
{{-
      if (frameworks[fx].compiler | object.has_key 'preserveCompilationContext')
-}}
    {{- level2_sep -}}
    <PreserveCompilationContext>{{ frameworks[fx].compiler.preserveCompilationContext | string.bool 'true' 'false' }}</PreserveCompilationContext>
{{-
      end
-}}
{{-
      if (frameworks[fx].compiler | object.has_key 'xmlDoc')
-}}
    {{- level2_sep -}}
    <GenerateDocumentationFile>{{ frameworks[fx].compiler.xmlDoc | string.bool 'true' 'false' }}</GenerateDocumentationFile>
{{-
      end
-}}
{{-
      if (frameworks[fx].compiler | object.has_key 'allowUnsafe')
-}}
    {{- level2_sep -}}
    <AllowUnsafeBlocks>{{ frameworks[fx].compiler.allowUnsafe | string.bool 'true' 'false' }}</AllowUnsafeBlocks>
{{-
      end
-}}
{{-
      if (frameworks[fx].compiler | object.has_key 'optimize')
-}}
    {{- level2_sep -}}
    <Optimize>{{ frameworks[fx].compiler.optimize | string.bool 'true' 'false' }}</Optimize>
{{-
      end
-}}
    <!-- legacy compat options -->
{{-
      if (frameworks[fx].compiler | object.has_key 'noStdLib')
-}}
    {{- level2_sep -}}
    <NoStdLib>{{ frameworks[fx].compiler.noStdLib | string.bool 'true' 'false' }}</NoStdLib>
{{-
      end 
-}}
{{-
      if (frameworks[fx].cpuArchitecture != empty)
-}}
    {{- level2_sep -}}
    <ProcessorArchitecture>{{ frameworks[fx].compiler.cpuArchitecture | html.xmltext }}</ProcessorArchitecture>
{{-
      end 
-}}
{{-
      if (frameworks[fx].platform != empty)
-}}
    {{- level2_sep -}}
    <Platform>{{ frameworks[fx].compiler.platform | html.xmltext }}</Platform>
{{-
      end 
-}}
{{-
      if (frameworks[fx].applicationIcon != empty)
-}}
    {{- level2_sep -}}
    <ApplicationIcon>{{ frameworks[fx].compiler.applicationIcon | html.xmltext }}</ApplicationIcon>
{{-
      end 
-}}
{{-
      if (frameworks[fx].targetCompactFramework != empty)
-}}
    {{- level2_sep -}}
    <TargetCompactFramework>{{ frameworks[fx].compiler.targetCompactFramework | html.xmltext }}</TargetCompactFramework>
{{-
      end 
-}}
  {{- level2_last_sep -}}
  </PropertyGroup>
{{-
    end
-}}
{{-
    if (frameworks[fx].compiler != empty) && (frameworks[fx].compiler | object.has_key 'configuration')
      for cfg in (frameworks[fx].compiler.configuration | object.keys)
-}}
  {{- level1_sep -}}
  {{- level1_sep -}}
  <!-- Compiler options for {{ fx }} framework in {{ cfg }} configuration -->
  <PropertyGroup Condition="('$(TargetFramework)'=='{{ fx | html.xmlattrib }}') And ('$(Configuration)'=='{{ cfg | html.xmlattrib }}')">
{{-
        if frameworks[fx].compiler.configuration[cfg].outputType != empty
-}}
    {{- level2_sep -}}
    <OutputType>{{ frameworks[fx].compiler.configuration[cfg].outputType | html.xmltext }}</OutputType>
{{-
        end
-}}
{{-
        if frameworks[fx].compiler.configuration[cfg].noWarn != empty
-}}
    {{- level2_sep -}}
    <NoWarn>$(NoWarn);{{ frameworks[fx].compiler.configuration[cfg].noWarn | array.join ';' | html.xmltext }}</NoWarn>
{{-
        end
-}}
{{-
        if frameworks[fx].compiler.configuration[cfg].constants != empty
-}}
    {{- level2_sep -}}
    <DefineConstants>$(DefineConstants);{{ frameworks[fx].compiler.configuration[cfg].constants | array.join ';' | html.xmltext }}</DefineConstants>
{{-
        end
-}}
{{-
        if frameworks[fx].compiler.configuration[cfg].debugSymbolsType != empty
-}}
    {{- level2_sep -}}
    <DebugType>{{ frameworks[fx].compiler.configuration[cfg].debugSymbolsType | html.xmltext }}</DebugType>
{{-
        end
-}}
{{-
        if frameworks[fx].compiler.configuration[cfg] | object.has_key 'strongNameKey'
-}}
    {{- level2_sep -}}
    <AssemblyOriginatorKeyFile>{{ frameworks[fx].compiler.configuration[cfg].strongNameKey.path | html.xmltext }}</AssemblyOriginatorKeyFile>
    <SignAssembly>true</SignAssembly>
    <PublicSign Condition="'$(OS)' != 'Windows_NT'">true</PublicSign>
{{-
        end
-}}
{{-
        if frameworks[fx].compiler.configuration[cfg] | object.has_key 'treatWarningsAsErrors'
-}}
    {{- level2_sep -}}
    <TreatWarningsAsErrors>{{ frameworks[fx].compiler.configuration[cfg].treatWarningsAsErrors | string.bool 'true' 'false' }}</TreatWarningsAsErrors>
{{-
        end 
-}}
{{-
        if frameworks[fx].compiler.configuration[cfg] | object.has_key 'preserveCompilationContext'
-}}
    {{- level2_sep -}}
    <PreserveCompilationContext>{{ frameworks[fx].compiler.configuration[cfg].preserveCompilationContext | string.bool 'true' 'false' }}</PreserveCompilationContext>
{{-
        end 
-}}
{{-
        if frameworks[fx].compiler.configuration[cfg] | object.has_key 'xmlDoc'
-}}
    {{- level2_sep -}}
    <GenerateDocumentationFile>{{ frameworks[fx].compiler.configuration[cfg].xmlDoc | string.bool 'true' 'false' }}</GenerateDocumentationFile>
{{-
        end 
-}}
{{-
        if frameworks[fx].compiler.configuration[cfg] | object.has_key 'allowUnsafe'
-}}
    {{- level2_sep -}}
    <AllowUnsafeBlocks>{{ frameworks[fx].compiler.configuration[cfg].allowUnsafe | string.bool 'true' 'false' }}</AllowUnsafeBlocks>
{{-
        end 
-}}
{{-
        if frameworks[fx].compiler.configuration[cfg] | object.has_key 'optimize'
-}}
    {{- level2_sep -}}
    <Optimize>{{ frameworks[fx].compiler.configuration[cfg].optimize | string.bool 'true' 'false' }}</Optimize>
{{-
        end 
-}}
  </PropertyGroup>
{{-
      end
    end
-}}
{{-
    if frameworks[fx].disableDefaultDependencyPackages == true
-}}
  {{- level1_sep -}}
  <!-- Default package dependencies for this framework will not be added -->
  <PropertyGroup Condition="'$(TargetFramework)'=='{{ fx | html.xmlattrib }}'">
    <DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>
  </PropertyGroup>
{{-
    end
-}}
  {{- level1_sep -}}
  {{- level1_sep -}}
  <!-- Project dependencies for {{ fx }} framework -->
  <ItemGroup Condition="'$(TargetFramework)'=='{{ fx | html.xmlattrib }}'">
{{-
    item_found = false
    for dep in (frameworks[fx].dependencies | object.keys)
      if frameworks[fx].dependencies[dep].type == 'project'
        item_found = true
        project_makefile_extension = frameworks[fx].dependencies[dep].makeFileExtension | string.replace_empty compiler.makeFileExtension
        project_makefile = dep + project_makefile_extension
        project_makefile_path = workingSourceRelativeDir + '/' + dep + '/' + project_makefile
-}}
    {{- level2_sep -}}
    <ProjectReference Include="{{ frameworks[fx].dependencies[dep].path | string.replace_empty project_makefile_path | html.xmlattrib }}" />
{{-
      end
    end
-}}
  {{- item_found | string.bool level2_last_sep '' -}}
  </ItemGroup>

  <!-- GAC dependencies for {{ fx }} framework -->
  <ItemGroup Condition="'$(TargetFramework)'=='{{ fx | html.xmlattrib }}'">
{{-
    item_found = false
    for dep in (frameworks[fx].dependencies | object.keys)
      if (frameworks[fx].dependencies[dep].type == 'gac' || frameworks[fx].dependencies[dep].type == 'dev-gac')
        item_found = true
-}}
    {{- level2_sep -}}
    <Reference Include="{{ dep | html.xmlattrib }}">
{{-
        sub_item_found = false
        if frameworks[fx].dependencies[dep].hintPath != empty
          sub_item_found = true
-}}
      {{- level3_sep -}}
      <HintPath>{{ frameworks[fx].dependencies[dep].hintPath | html.xmltext }}</HintPath>
{{-
        end
-}}
{{-
        if (frameworks[fx].dependencies[dep] | object.has_key 'private')
          sub_item_found = true
-}}
      {{- level3_sep -}}
      <Private>{{ frameworks[fx].dependencies[dep].private | string.bool 'true' 'false' }}</Private>
{{-
        end
-}}
{{-
        if (frameworks[fx].dependencies[dep] | object.has_key 'exactVersion')
          sub_item_found = true
-}}
      {{- level3_sep -}}
      <SpecificVersion>{{ frameworks[fx].dependencies[dep].exactVersion | string.bool 'true' 'false' }}</SpecificVersion>
{{-
        end
-}}
    {{- sub_item_found | string.bool level3_last_sep '' -}}
    </Reference>
{{-
      end
    end
-}}
  {{- item_found | string.bool level2_last_sep '' -}}
  </ItemGroup>

  <!-- Dependency packages for {{ fx }} framework -->
  <ItemGroup Condition="'$(TargetFramework)'=='{{ fx | html.xmlattrib }}'">
{{-
    item_found = false
    fx_dep_configs = []
    for dep in (frameworks[fx].dependencies | object.keys)
      is_fx_dep_pkg = (frameworks[fx].dependencies[dep].type == 'package' || frameworks[fx].dependencies[dep].type == 'dev-package')
      is_fx_dep_cfg_specific = (frameworks[fx].dependencies[dep].configuration != empty && frameworks[fx].dependencies[dep].configuration != '*')

      if (is_fx_dep_pkg && is_fx_dep_cfg_specific)
        fx_dep_configs = fx_dep_configs | array.add frameworks[fx].dependencies[dep].configuration
      end

      if (is_fx_dep_pkg && !is_fx_dep_cfg_specific)
        item_found = true
-}}
{{-
        if frameworks[fx].dependencies[dep].type == 'dev-package'
-}}
    {{- level2_sep -}}
    <PackageReference Include="{{ dep | html.xmlattrib }}" Version="{{ frameworks[fx].dependencies[dep].version | html.xmlattrib }}" PrivateAssets="All" />
{{-
        else
-}}
    {{- level2_sep -}}
    <PackageReference Include="{{ dep | html.xmlattrib }}" Version="{{ frameworks[fx].dependencies[dep].version | html.xmlattrib }}" />
{{-
        end
-}}
{{-
      end
    end

    fx_dep_configs = fx_dep_configs | array.uniq
-}}
  {{- item_found | string.bool level2_last_sep '' -}}
  </ItemGroup>

{{-
    for fx_dep_cfg in fx_dep_configs
-}}
  {{- level1_sep -}}
  <!-- Dependency packages for {{ fx }} framework in {{ fx_dep_cfg }} configuration -->
  <ItemGroup Condition="('$(TargetFramework)'=='{{ fx | html.xmlattrib }}') And ('$(Configuration)'=='{{ fx_dep_cfg | html.xmlattrib }}')">
{{-
      item_found = false
      for dep in (frameworks[fx].dependencies | object.keys)
        is_fx_dep_pkg = (frameworks[fx].dependencies[dep].type == 'package' || frameworks[fx].dependencies[dep].type == 'dev-package')
        is_fx_dep_cfg_specific = (frameworks[fx].dependencies[dep].configuration != empty && frameworks[fx].dependencies[dep].configuration != '*')

        if (is_fx_dep_pkg && is_fx_dep_cfg_specific && (frameworks[fx].dependencies[dep].configuration == fx_dep_cfg))
          item_found = true
-}}
{{-
          if frameworks[fx].dependencies[dep].type == 'dev-package'
-}}
    {{- level2_sep -}}
    <PackageReference Include="{{ dep | html.xmlattrib }}" Version="{{ frameworks[fx].dependencies[dep].version | html.xmlattrib }}" PrivateAssets="All" />
{{-
          else
-}}
    {{- level2_sep -}}
    <PackageReference Include="{{ dep | html.xmlattrib }}" Version="{{ frameworks[fx].dependencies[dep].version | html.xmlattrib }}" />
{{-
          end
-}}
{{-
        end
      end
-}}
  {{- item_found | string.bool level2_last_sep '' -}}
  </ItemGroup>
{{-
    end
-}}

{{-
  end
-}}

  {{- level1_sep -}}
  {{- level1_sep -}}
  <!-- End frameworks -->

  <!-- SDK customization -->
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />
</Project>
