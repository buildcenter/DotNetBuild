//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Security;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

#if NETFX
using System.Resources;
using System.Security.Permissions;
#endif

// *********************************************************************************

// General metadata
// ================
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.

[assembly: AssemblyCompany("{{ company }}")]
[assembly: AssemblyCopyright("{{ copyright }}")]
[assembly: AssemblyTrademark("{{ trademark }}")]

// Product name
[assembly: AssemblyProduct("{{ product }}")]

// Assembly description
[assembly: AssemblyDescription("{{ assemblyDescription }}")]

// Assembly title
{{
	dotnet_frameworks = {
		NETSTANDARD1_0 : '.NET Standard 1.0',
		NETSTANDARD1_1 : '.NET Standard 1.1',
		NETSTANDARD1_2 : '.NET Standard 1.2',
		NETSTANDARD1_3 : '.NET Standard 1.3',
		NETSTANDARD1_4 : '.NET Standard 1.4',
		NETSTANDARD1_5 : '.NET Standard 1.5',
		NETSTANDARD1_6 : '.NET Standard 1.6',
		NETSTANDARD    : '.NET Standard',
		NETSTANDARD2_0 : '.NET Standard 2.0',
		NETSTANDARD2_1 : '.NET Standard 2.1',
		NETSTANDARD2_2 : '.NET Standard 2.2',
		NETSTANDARD2   : '.NET Standard 2',
		NETCOREAPP1_0  : '.NET Core Application 1.0',
		NETCOREAPP     : '.NET Core Application',
		NETCORE45      : '.NET Core 4.5',
		NETCORE451     : '.NET Core 4.5.1',
		NETCORE50      : '.NET Core 5.0',
		NETCORE        : '.NET Core',
		UAP10          : 'Universal Windows Platform 1.0',
		UAP            : 'Universal Windows Platform',
		NET11          : '.NET 1.1',
		NET20          : '.NET 2.0',
		NET35          : '.NET 3.5',
		NET40          : '.NET 4.0',
		NET403         : '.NET 4.0.3',
		NET45          : '.NET 4.5',
		NET451         : '.NET 4.5.1',
		NET452         : '.NET 4.5.2',
		NET46          : '.NET 1.1',
		NET461         : '.NET 4.6.1',
		NET462         : '.NET 4.6.2',
		NET47          : '.NET 4.7',
		NETFX          : '.NET Framework',
		PORTABLE       : 'Portable Class Library',
		NETCF          : '.NET Compact Framework',
		NETMF          : '.NET Micro Framework'
	}
}}
{{-
	for define_framework in (dotnet_frameworks | object.keys)
}}
{{ for.first | string.bool '#if' '#elif' }} {{ define_framework }}
[assembly: AssemblyTitle("{{ assemblyTitle }} (for {{ dotnet_frameworks[define_framework] }})")]
{{
	end
}}
#else
[assembly: AssemblyTitle("{{ assemblyTitle }}")]
#endif

{{ 
	if assemblyAlias != empty
}}
// This is a friendly default alias in cases where the assembly name is not friendly or is a GUID.
[assembly: AssemblyDefaultAlias("{{ assemblyAlias }}")]
{{ 
	end 
}}

// *********************************************************************************

// Version
// =======
[assembly: AssemblyVersion("{{ assemblyVersion }}")]

#if !NETCF
[assembly: AssemblyFileVersion("{{ assemblyVersion }}")]
#endif

[assembly: AssemblyInformationalVersion("{{ assemblyVersion }}")]

#if NETFX
[assembly: TypeLibVersion({{ versioning.major }}, {{ versioning.minor }})]

// Instructs a ResourceManager object to ask for a particular version of a satellite assembly.
[assembly: SatelliteContractVersion("{{ assemblyVersion }}")]
#endif

// *********************************************************************************

// CLS behavior
// ============

// If an assembly is marked as CLS-compliant, any publicly exposed type in the assembly 
// that is not CLS-compliant must be marked with CLSCompliantAttribute using a false 
// argument. All non-compliant members must provide corresponding CLS-compliant 
// alternatives.
[assembly: CLSCompliant({{ clsCompliant | string.bool "true" "false" }})]

// *********************************************************************************

// Globalization
// =============
// Controls globalization settings.

// The attribute is used by compilers to distinguish between a main assembly and a 
// satellite assembly. You should only specify a culture when working with a 
// satellite assembly, as in [assembly:AssemblyCultureAttribute("de")]. 
// The main assembly should always be "", or it will break because no other code 
// will be able to find the library's entry points at runtime.
[assembly: AssemblyCulture("")]

// *********************************************************************************

#if NETFX

{{ 
	if comGuid != empty
}}
// COM Interop
// ===========

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(true)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("{{ comGuid | string.downcase }}")]

// COM exposed version
[assembly: ComCompatibleVersion({{ versioning.major }}, {{ versioning.minor }}, {{ versioning.build }}, {{ versioning.revision }})]

// *********************************************************************************

{{ 
	end
}}

// This attribute is used by Ngen.exe to generate native assembly images. 
// A dependency that is likely to be loaded (Always) will cause Ngen.exe to bind to that 
// dependency. Using this hint allows Ngen.exe to generate code that will result in a 
// reduced working set and improved throughput but at the cost of always loading the 
// dependency when the parent assembly is loaded. 
[assembly: DefaultDependency(LoadHint.Always)]

// Runtime Security
// ================
{{ 
	if allowPartialTrust == true
}}
[assembly: AllowPartiallyTrustedCallers]
{{ 
	end
}}
[assembly: SecurityRules(SecurityRuleSet.Level2, SkipVerificationInFullTrust = true)]

#endif

// *********************************************************************************

{{ 
	if internalsVisibleTo != empty
}}
// Internal member access control for friend assemblies.
// Friend assemblies have access to internal members of this assembly.
{{-
		for friend_assembly_name in (internalsVisibleTo | object.keys)
			define_conditions = internalsVisibleTo[friend_assembly_name] | object.keys
			for define_condition in define_conditions
				friend_assembly_signature = internalsVisibleTo[friend_assembly_name][define_condition]
}}
#if {{ define_condition | string.replace ',' ' && ' | string.upcase }}
[assembly: InternalsVisibleTo("{{ friend_assembly_name }}{{ friend_assembly_signature | string.replace_empty '' (', ' + friend_assembly_signature) }}")]
#endif
{{
			end
		end
	end
}}
