//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Security;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

#if NETFX
using System.Resources;
using System.Security.Permissions;
#endif

// *********************************************************************************

// General metadata
// ================
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.

[assembly: AssemblyCompany("{{ $company }}")]
[assembly: AssemblyCopyright("{{ $copyright }}")]
[assembly: AssemblyTrademark("{{ $trademark }}")]

// Product name
[assembly: AssemblyProduct("{{ $product }}")]

// Assembly description
[assembly: AssemblyDescription("{{ $assemblyDescription }}")]

// Assembly title
#if NETSTANDARD1_0
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET Standard 1.0]")]
#elif NETSTANDARD1_1
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET Standard 1.1]")]
#elif NETSTANDARD1_2
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET Standard 1.2]")]
#elif NETSTANDARD1_3
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET Standard 1.3]")]
#elif NETSTANDARD1_4
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET Standard 1.4]")]
#elif NETSTANDARD1_5
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET Standard 1.5]")]
#elif NETSTANDARD1_6
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET Standard 1.6]")]
#elif NETSTANDARD
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET Standard]")]
#elif NETSTANDARD2_0
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET Standard 2.0]")]
#elif NETSTANDARD2
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET Standard 2]")]
#elif NETCOREAPP1_0
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET Core Application 1.0]")]
#elif NETCOREAPP
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET Core Application]")]
#elif NETCORE45
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET Core 4.5]")]
#elif NETCORE451
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET Core 4.5.1]")]
#elif NETCORE50
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET Core 5.0]")]
#elif NETCORE
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET Core]")]
#elif UAP10
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for Universal Windows Platform 1.0]")]
#elif UAP
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for Universal Windows Platform]")]
#elif NET11
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET 1.1]")]
#elif NET20
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET 2.0]")]
#elif NET35
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET 3.5]")]
#elif NET40
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET 4.0]")]
#elif NET403
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET 4.0.3]")]
#elif NET45
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET 4.5]")]
#elif NET451
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET 4.5.1]")]
#elif NET452
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET 4.5.2]")]
#elif NET46
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET 4.6]")]
#elif NET461
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET 4.6.1]")]
#elif NET462
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET 4.6.2]")]
#elif NET47
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET 4.7]")]
#elif NETFX
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET]")]
#elif PORTABLE
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for Portable Class Library]")]
#elif NETCF
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET Compact Framework]")]
#elif NETMF
[assembly: AssemblyTitle("{{ $assemblyTitle }} [for .NET Micro Framework]")]
#else
[assembly: AssemblyTitle("{{ $assemblyTitle }}")]
#endif

{{ if ($assemblyAlias) { }}
// This is a friendly default alias in cases where the assembly name is not friendly or is a GUID.
[assembly: AssemblyDefaultAlias("{{ $assemblyAlias }}")]
{{ } }}

// *********************************************************************************

// Version
// =======
[assembly: AssemblyVersion("{{ $assemblyVersion }}")]

#if !NETCF
[assembly: AssemblyFileVersion("{{ $assemblyVersion }}")]
#endif

[assembly: AssemblyInformationalVersion("{{ $assemblyVersion }}")]

#if NETFX
[assembly: TypeLibVersion({{ $versioning.major }}, {{ $versioning.minor }})]

// Instructs a ResourceManager object to ask for a particular version of a satellite assembly.
[assembly: SatelliteContractVersion("{{ $assemblyVersion }}")]
#endif

// *********************************************************************************

// CLS behavior
// ============

// If an assembly is marked as CLS-compliant, any publicly exposed type in the assembly 
// that is not CLS-compliant must be marked with CLSCompliantAttribute using a false 
// argument. All non-compliant members must provide corresponding CLS-compliant 
// alternatives.
[assembly: CLSCompliant({{ $clsCompliant | bool }})]

// *********************************************************************************

// Globalization
// =============
// Controls globalization settings.

// The attribute is used by compilers to distinguish between a main assembly and a 
// satellite assembly. You should only specify a culture when working with a 
// satellite assembly, as in [assembly:AssemblyCultureAttribute("de")]. 
// The main assembly should always be "", or it will break because no other code 
// will be able to find the library's entry points at runtime.
[assembly: AssemblyCulture("")]

// *********************************************************************************

#if NETFX

{{ if ($comGuid) { }}
// COM Interop
// ===========

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(true)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("{{ $comGuid | lowercase }}")]

// COM exposed version
[assembly: ComCompatibleVersion({{ $versioning.major }}, {{ $versioning.minor }}, {{ $versioning.build }}, {{ $versioning.revision }})]

// *********************************************************************************

{{ } }}

// This attribute is used by Ngen.exe to generate native assembly images. 
// A dependency that is likely to be loaded (Always) will cause Ngen.exe to bind to that 
// dependency. Using this hint allows Ngen.exe to generate code that will result in a 
// reduced working set and improved throughput but at the cost of always loading the 
// dependency when the parent assembly is loaded. 
[assembly: DefaultDependency(LoadHint.Always)]

// Runtime Security
// ================
{{ if ($allowPartialTrust) { }}
[assembly: AllowPartiallyTrustedCallers]
{{ } }}
[assembly: SecurityRules(SecurityRuleSet.Level2, SkipVerificationInFullTrust = true)]

#endif

// *********************************************************************************

{{ if ($internalsVisibleTo) { }}
// Internal member access control for friend assemblies.
// Friend assemblies have access to internal members of this assembly.
{{ } }}
{{ $internalsVisibleTo | array | where { $_ -ne $null } | % { }}
{{   $friendAssembly = $_ }}
{{   $conditionDefines = $friendAssembly | Get-Member -MemberType NoteProperty | select -expand Name | where { $_ -ne 'name' } }}
{{   $conditionDefines | % { }}
#if ({{ $_ | replace ',' -With ' && ' | uppercase }})
[assembly: InternalsVisibleTo("{{ $friendAssembly.name }}{{ if ($friendAssembly."$_") { }}, {{ $friendAssembly."$_" }}{{ } }}")]
#endif
{{   } }}
{{ } }}
