<Project>
  <!-- 
    Auto Generated
    ==============
    This code was generated by a tool.
    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.

    Reference
    =========
    + https://docs.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-properties
    + https://docs.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-items 

    Notes
    =====
    We avoid <Project SDK="Microsoft.NET.Sdk"> because dotnet test will have a problem with custom "BaseOutputPath" 
    and "BaseIntermediateOutputPath".
    + https://github.com/dotnet/sdk/issues/980#issuecomment-285957284
  -->

  <!-- SDK customization -->
  <PropertyGroup>
    <BaseOutputPath>{{ $baseOutputPath | xmltext }}</BaseOutputPath>
    <BaseIntermediateOutputPath>{{ $baseIntermediateOutputPath | xmltext }}</BaseIntermediateOutputPath>
  </PropertyGroup>
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <!-- Assembly metadata -->
  <PropertyGroup>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
  </PropertyGroup>
  <PropertyGroup>
    <AssemblyName>{{ $assemblyName | xmltext }}</AssemblyName>
  </PropertyGroup>
  <PropertyGroup>
    <VersionPrefix>{{ $assemblyVersion | xmltext }}</VersionPrefix>
    <VersionSuffix>{{ $assemblyVersionSuffix | xmltext }}</VersionSuffix>
  </PropertyGroup>
  <PropertyGroup>
    <Authors>{{ ($authors -join ';') | xmltext }}</Authors>
    <Company>{{ $company | xmltext }}</Company>
    <NeutralLanguage>en-US</NeutralLanguage>
    <AssemblyTitle>{{ $assemblyTitle | xmltext }}</AssemblyTitle>
    <Description>{{ $assemblyDescription | xmltext }}</Description>
    <Copyright>{{ $copyright | xmltext }}</Copyright>
  </PropertyGroup>

{{ if ($userSecretsId) { }}
  <PropertyGroup>
    <UserSecretsId>{{ $userSecretsId | xmltext }}</UserSecretsId>
  </PropertyGroup>

{{ } }}
{{ if ($rootNamespace) { }}
  <PropertyGroup>
    <RootNamespace>{{ $rootNamespace | xmltext }}</RootNamespace>
  </PropertyGroup>

{{ } }}
{{ if ($targetOS) { }}
  <!-- runtime id -->
  <PropertyGroup>
    <RuntimeIdentifiers>{{ ($targetOS -join ';') | xmltext }}</RuntimeIdentifiers>
  </PropertyGroup>

{{ } }}
  <!-- Target frameworks -->
  <PropertyGroup Condition="'$(BuildingInsideVisualStudio)'=='true'">
    <TargetFrameworks>{{ (($frameworks | array | where { $_.disableVisualStudioIntegration -ne $true } | % { $_.name }) -join ';') | xmltext }}</TargetFrameworks>
  </PropertyGroup>
  <PropertyGroup Condition="'$(BuildingInsideVisualStudio)'!='true'">
    <TargetFrameworks>{{ (($frameworks | array | % { $_.name }) -join ';') | xmltext }}</TargetFrameworks>
  </PropertyGroup>

  <!-- dependency dotnet build tools -->
  <ItemGroup>
{{- $dependencies | array | where { $_.type -eq 'build-tool' } | % { }}
    <DotNetCliToolReference Include="{{ $_.name | xmlattrib }}" Version="{{ $_.version | xmlattrib }}" />
{{ } }}
  </ItemGroup>

  <!-- dependency projects -->
  <ItemGroup>
{{- $dependencies | array | where { ($_.type -eq 'project') } | % { }}
    <ProjectReference Include="{{ $_.path | replace -null ('{0}/{1}/{1}{2}' -f $workingSourceRelativeDir, $_.name, ($_.makeFileExtension | replace -null $compiler.makeFileExtension)) | xmlattrib }}" />
{{ } }}
  </ItemGroup>

{{ $dependencies | array | where { ($_.name -eq 'NETStandard.Library') -and ($_.type -eq 'package') } | select -First 1 | % { }}
  <!-- NETStandard.Library package -->
  <PropertyGroup>
    <NetStandardImplicitPackageVersion>{{ $_.version | xmltext }}</NetStandardImplicitPackageVersion>
  </PropertyGroup>

{{ } }}
{{ $dependencies | array | where { ($_.name -eq 'Microsoft.NETCore.App') -and ($_.type -eq 'package') } | select -First 1 | % { }}
  <!-- Microsoft.NETCore.App package -->
  <PropertyGroup>
    <RuntimeFrameworkVersion>{{ $_.version | xmltext }}</RuntimeFrameworkVersion>
  </PropertyGroup>

{{ } }}
  <!-- dependency packages (incl. dev packages) -->
  <ItemGroup>
{{- $dependencies | array | where { 
  ($_.type -in @('package', 'dev-package')) -and 
  ($_.name -notin @('NETStandard.Library', 'Microsoft.NETCore.App')) -and 
  ((-not $_.configuration) -or ($_.configuration -eq '*')) 
} | % { }}
    <PackageReference Include="{{ $_.name | xmlattrib }}" Version="{{ $_.version | xmlattrib }}"{{ if ($_.type -eq 'dev-package') { }} PrivateAssets="All"{{ } }} />
{{ } -}}
  </ItemGroup>
  <ItemGroup Condition="'$(Configuration)'=='Debug'">
{{- $dependencies | array | where { 
  ($_.type -in @('package', 'dev-package')) -and 
  ($_.name -notin @('NETStandard.Library', 'Microsoft.NETCore.App')) -and 
  ($_.configuration -eq 'debug') 
} | % { }}
    <PackageReference Include="{{ $_.name | xmlattrib }}" Version="{{ $_.version | xmlattrib }}"{{ if ($_.type -eq 'dev-package') { }} PrivateAssets="All"{{ } }} />
{{ } -}}
  </ItemGroup>
  <ItemGroup Condition="'$(Configuration)'=='Release'">
{{- $dependencies | array | where { 
  ($_.type -in @('package', 'dev-package')) -and 
  ($_.name -notin @('NETStandard.Library', 'Microsoft.NETCore.App')) -and 
  ($_.configuration -eq 'release') 
} | % { }}
    <PackageReference Include="{{ $_.name | xmlattrib }}" Version="{{ $_.version | xmlattrib }}"{{ if ($_.type -eq 'dev-package') { }} PrivateAssets="All"{{ } }} />
{{ } -}}
  </ItemGroup>

  <!-- scripts -->
  <Target Name="PreCompile" BeforeTargets="Build">
{{- $scripts.preCompile | where { $_ -ne $null } | % { }}
    <Exec Command="{{ $_ | xmlattrib }}" />
{{ } -}}
  </Target>
  <Target Name="PostCompile" AfterTargets="Build">
{{- $scripts.postCompile | where { $_ -ne $null } | % { }}
    <Exec Command="{{ $_ | xmlattrib }}" />
{{ } -}}
  </Target>
  <Target Name="PrePublish" BeforeTargets="Publish">
{{- $scripts.prePublish | where { $_ -ne $null } | % { }}
    <Exec Command="{{ $_ | xmlattrib }}" />
{{ } -}}
  </Target>
  <Target Name="PostPublish" AfterTargets="Publish">
{{- $scripts.postPublish | where { $_ -ne $null } | % { }}
    <Exec Command="{{ $_ | xmlattrib }}" />
{{ } -}}
  </Target>

{{- if ($vm) { }}
  <!-- runtime options -->
  <PropertyGroup>
    {{ if ($vm.serverGarbageCollection) { }}<ServerGarbageCollection>{{ $vm.serverGarbageCollection | bool }}</ServerGarbageCollection>{{ } }}
    {{ if ($vm.concurrentGarbageCollection) { }}<ConcurrentGarbageCollection>{{ $vm.concurrentGarbageCollection | bool }}</ConcurrentGarbageCollection>{{ } }}
    {{ if ($vm.retainVMGarbageCollection) { }}<RetainVMGarbageCollection>{{ $vm.retainVMGarbageCollection | bool }}</RetainVMGarbageCollection>{{ } }}
    {{ if ($vm.threadPoolMinThreads) { }}<ThreadPoolMinThreads>{{ $vm.threadPoolMinThreads | xmltext }}</ThreadPoolMinThreads>{{ } }}
    {{ if ($vm.threadPoolMaxThreads) { }}<ThreadPoolMaxThreads>{{ $vm.threadPoolMaxThreads | xmltext }}</ThreadPoolMaxThreads>{{ } }}
  </PropertyGroup>
{{ } }}

  <!-- compiler options -->
  <PropertyGroup>
    <OutputType>{{ $compiler.outputType | replace -null 'Library' | xmltext }}</OutputType>
    {{ if ($compiler.noWarn) { }}<NoWarn>$(NoWarn);{{ ($compiler.noWarn -join ';') | xmltext }}</NoWarn>{{ } }}
    {{ if ($compiler.constants) { }}<DefineConstants>$(DefineConstants);{{ ($compiler.constants -join ';') | xmltext }}</DefineConstants>{{ } }}
    <TreatWarningsAsErrors>{{ $compiler.treatWarningsAsErrors | bool }}</TreatWarningsAsErrors>
    <PreserveCompilationContext>{{ $compiler.preserveCompilationContext | bool }}</PreserveCompilationContext>
    {{ if ($compiler.xmlDoc) { }}<GenerateDocumentationFile>{{ $compiler.xmlDoc | bool }}</GenerateDocumentationFile>{{ } }}
    <AllowUnsafeBlocks>{{ $compiler.allowUnsafe | bool }}</AllowUnsafeBlocks>
    <DebugType>{{ $compiler.debugSymbolsType | replace -null 'portable' | xmltext }}</DebugType>
    <Optimize>{{ $compiler.optimize | bool }}</Optimize>
  </PropertyGroup>
{{ if ($compiler.strongNameKey) { }}
  <PropertyGroup>
    <AssemblyOriginatorKeyFile>{{ $compiler.strongNameKey.path | xmltext }}</AssemblyOriginatorKeyFile>
    <SignAssembly>true</SignAssembly>
    <PublicSign Condition="'$(OS)' != 'Windows_NT'">true</PublicSign>
  </PropertyGroup>
{{ } }}
{{ $compiler.configuration | array | where { $_ -ne $null } | % { }}
  <PropertyGroup Condition="('$(Configuration)'=='{{ $_.name }}')">
    {{- if ($_.outputType)    { }}
    <OutputType>{{ $_.outputType | xmltext }}</OutputType>
    {{- } -}}
    {{- if ($_.noWarn)        { }}
    <NoWarn>$(NoWarn);{{ ($_.noWarn -join ';') | xmltext }}</NoWarn>
    {{- } -}}
    {{- if ($_.constants)     { }}
    <DefineConstants>$(DefineConstants);{{ ($_.constants -join ';') | xmltext }}</DefineConstants>
    {{- } -}}
    {{- if ($_.treatWarningsAsErrors)      { }}
    <TreatWarningsAsErrors>{{ $_.treatWarningsAsErrors | bool }}</TreatWarningsAsErrors>
    {{- } -}}
    {{- if ($_.preserveCompilationContext) { }}
    <PreserveCompilationContext>{{ $_.preserveCompilationContext | bool }}</PreserveCompilationContext>
    {{- } -}}
    {{- if ($_.xmlDoc)           { }}
    <GenerateDocumentationFile>{{ $_.xmlDoc | bool }}</GenerateDocumentationFile>
    {{- } -}}
    {{- if ($_.allowUnsafe)      { }}
    <AllowUnsafeBlocks>{{ $_.allowUnsafe | bool }}</AllowUnsafeBlocks>
    {{- } -}}
    {{- if ($_.debugSymbolsType) { }}
    <DebugType>{{ $_.debugSymbolsType | xmltext }}</DebugType>
    {{- } -}}
    {{- if ($_.optimize)         { }}
    <Optimize>{{ $_.optimize | bool }}</Optimize>
    {{- } -}}
    {{- if ($_.strongNameKey)    { }}
    <AssemblyOriginatorKeyFile>{{ $_.strongNameKey.path | xmltext }}</AssemblyOriginatorKeyFile>
    <SignAssembly>true</SignAssembly>
    <PublicSign Condition="'$(OS)' != 'Windows_NT'">true</PublicSign>
    {{- } }}
  </PropertyGroup>
{{ } }}

  <!-- pack options -->
  <PropertyGroup>
    <PackageId>{{ $assemblyName | xmltext }}</PackageId>
    <PackageTags>{{ ($package.output.nuget.tags -join ';') | xmltext }}</PackageTags>
    <PackageReleaseNotes>{{ $package.output.nuget.releaseNotesUrl | xmltext }}</PackageReleaseNotes>
    <PackageIconUrl>{{ $package.output.nuget.iconUrl | xmltext }}</PackageIconUrl>
    <PackageProjectUrl>{{ $package.output.nuget.projectUrl | xmltext }}</PackageProjectUrl>
    <PackageLicenseUrl>{{ $package.output.nuget.licenseUrl | xmltext }}</PackageLicenseUrl>
    <PackageRequireLicenseAcceptance>{{ $package.output.nuget.requireLicenseAcceptance | bool }}</PackageRequireLicenseAcceptance>
    <RepositoryType>git</RepositoryType>
    <RepositoryUrl>{{ $package.output.nuget.sourceCodeUrl | xmltext }}</RepositoryUrl>
  </PropertyGroup>

  <!-- files -->
  <PropertyGroup>
    <EnableDefaultItems>false</EnableDefaultItems>
  </PropertyGroup>
  <ItemGroup>
{{ $files | array | where { $_.type -ne 'template' } | % { }}
    <{{ $_.type | uppercase -First 1 | xmlattrib }} Include="{{ $_.name | xmlattrib }}" {{- if ($_.exclude) { }} Exclude="{{ $_.exclude | xmlattrib }}"{{ } }}>
    {{- if ($_.dependsOn) { -}}
      <DependentUpon>{{ $_.dependsOn | xmltext }}</DependentUpon>
    {{- } -}}
    </{{ $_.type | uppercase -First 1 | xmlattrib }}>
{{ } }}
  </ItemGroup>
  <ItemGroup>
{{ $package.output.nuget.files | Get-Member -MemberType NoteProperty | select -expand Name | % { }}
    <Content Include="{{ ($package.output.nuget.files."$_" -join ';') | xmlattrib }}">
      <PackagePath>{{ if ($_ -eq '/') { '' } else { ($_ | xmltext) } }}</PackagePath>
      <Pack>true</Pack>
    </Content>
{{ } }}
  </ItemGroup>
  <Target Name="CopyStaticFiles" AfterTargets="Build" Condition="'$(TargetDir)'!=''">
    <ItemGroup>
      <StaticOutputFiles0 Include="Static/**" Exclude="" />
    </ItemGroup>
    <Message Text="Copying static resource files to output directory..." Importance="High" />
    <Copy SourceFiles="@(StaticOutputFiles0)" DestinationFolder="$(TargetDir)%(RecursiveDir)" SkipUnchangedFiles="true" />
  </Target>

  <!-- begin frameworks -->
{{ $frameworks | array | where { $_ -ne $null } | % { }}
{{   $currentFrameworkName = $_.name }}
{{   if ($_.compiler) { }}
  <!-- compiler options for {{ $currentFrameworkName }} -->
  <PropertyGroup Condition="'$(TargetFramework)'=='{{ $currentFrameworkName | xmlattrib }}'">
    {{- if ($_.compiler.outputType) { }}
    <OutputType>{{ $_.compiler.outputType | xmltext }}</OutputType>
    {{- } -}}
    {{- if ($_.compiler.noWarn)     { }}
    <NoWarn>$(NoWarn);{{ ($_.compiler.noWarn -join ';') | xmltext }}</NoWarn>
    {{- } -}}
    {{- if ($_.compiler.constants)  { }}
    <DefineConstants>$(DefineConstants);{{ ($_.compiler.constants -join ';') | xmltext }}</DefineConstants>
    {{- } -}}
    {{- if ($_.compiler.treatWarningsAsErrors)      { }}
    <TreatWarningsAsErrors>{{ $_.compiler.treatWarningsAsErrors | bool }}</TreatWarningsAsErrors>
    {{- } -}}
    {{- if ($_.compiler.preserveCompilationContext) { }}
    <PreserveCompilationContext>{{ $_.compiler.preserveCompilationContext | bool }}</PreserveCompilationContext>
    {{- } -}}
    {{- if ($_.compiler.xmlDoc)           { }}
    <GenerateDocumentationFile>{{ $_.compiler.xmlDoc | bool }}</GenerateDocumentationFile>
    {{- } -}}
    {{- if ($_.compiler.allowUnsafe)      { }}
    <AllowUnsafeBlocks>{{ $_.compiler.allowUnsafe | bool }}</AllowUnsafeBlocks>
    {{- } -}}
    {{- if ($_.compiler.optimize)         { }}
    <Optimize>{{ $_.compiler.optimize | bool }}</Optimize>
    {{- } -}}
    {{- if ($_.compiler.debugSymbolsType) { }}
    <DebugType>{{ $_.compiler.debugSymbolsType | xmltext }}</DebugType>
    {{- } -}}
    {{- if ($_.compiler.strongNameKey)    { }}
    <AssemblyOriginatorKeyFile>{{ $_.compiler.strongNameKey.path | xmltext }}</AssemblyOriginatorKeyFile>
    <SignAssembly>true</SignAssembly>
    <PublicSign Condition="'$(OS)' != 'Windows_NT'">true</PublicSign>
    {{- } }}
    <!-- Legacy compatibility -->
    {{- if ($_.compiler.noStdLib)        { }}
    <NoStdLib>{{ $_.compiler.noStdLib | bool }}</NoStdLib>
    {{- } -}}
    {{- if ($_.compiler.cpuArchitecture) { }}
    <ProcessorArchitecture>{{ $_.compiler.cpuArchitecture | xmltext }}</ProcessorArchitecture>
    {{- } -}}
    {{- if ($_.compiler.platform)        { }}
    <Platform>{{ $_.compiler.platform | xmltext }}</Platform>
    {{- } -}}
    {{- if ($_.compiler.applicationIcon) { }}
    <ApplicationIcon>{{ $_.compiler.applicationIcon | xmltext }}</ApplicationIcon>
    {{- } -}}
    {{- if ($_.compiler.targetCompactFramework) { }}
    <TargetCompactFramework>{{ $_.compiler.targetCompactFramework | xmltext }}</TargetCompactFramework>
    {{- } }}
  </PropertyGroup>  
  {{-   } -}}

{{   $_.compiler.configuration | array | where { $_ -ne $null } | % { }}
  <!-- compiler options for {{ $currentFrameworkName }} in {{ $_.name }} configuration -->
  <PropertyGroup Condition="('$(TargetFramework)'=='{{ $currentFrameworkName | xmlattrib }}') And ('$(Configuration)'=='{{ $_.name | xmlattrib }}')">
    {{- if ($_.outputType)    { }}
    <OutputType>{{ $_.outputType | xmltext }}</OutputType>
    {{- } -}}
    {{- if ($_.noWarn)        { }}
    <NoWarn>$(NoWarn);{{ ($_.noWarn -join ';') | xmltext }}</NoWarn>
    {{- } -}}
    {{- if ($_.constants)     { }}
    <DefineConstants>$(NoWarn);{{ ($_.constants -join ';') | xmltext }}</DefineConstants>
    {{- } -}}
    {{- if ($_.treatWarningsAsErrors)      { }}
    <TreatWarningsAsErrors>{{ $_.treatWarningsAsErrors | bool }}</TreatWarningsAsErrors>
    {{- } -}}
    {{- if ($_.preserveCompilationContext) { }}
    <PreserveCompilationContext>{{ $_.preserveCompilationContext | bool }}</PreserveCompilationContext>
    {{- } -}}
    {{- if ($_.xmlDoc)           { }}
    <GenerateDocumentationFile>{{ $_.xmlDoc | bool }}</GenerateDocumentationFile>
    {{- } -}}
    {{- if ($_.allowUnsafe)      { }}
    <AllowUnsafeBlocks>{{ $_.allowUnsafe | bool }}</AllowUnsafeBlocks>
    {{- } -}}
    {{- if ($_.debugSymbolsType) { }}
    <DebugType>{{ $_.debugSymbolsType | xmltext }}</DebugType>
    {{- } -}}
    {{- if ($_.optimize)         { }}
    <Optimize>{{ $_.optimize | bool }}</Optimize>
    {{- } -}}
    {{  if ($_.strongNameKey)    { }}
    <AssemblyOriginatorKeyFile>{{ $_.strongNameKey.path | xmltext }}</AssemblyOriginatorKeyFile>
    <SignAssembly>true</SignAssembly>
    <PublicSign Condition="'$(OS)' != 'Windows_NT'">true</PublicSign>
    {{- } }}
  </PropertyGroup>
{{   } }}

  <!-- project dependencies for {{ $currentFrameworkName }} -->
  <ItemGroup Condition="'$(TargetFramework)'=='{{ $currentFrameworkName | xmlattrib }}'">
{{-   $_.dependencies | array | where { ($_.type -eq 'project') } | % { }}
    <ProjectReference Include="{{ $_.path | replace -null ('{0}/{1}/{1}{2}' -f $workingSourceRelativeDir, $_.name, ($_.makeFileExtension | replace -null $compiler.makeFileExtension)) | xmlattrib }}" />
{{    } -}}
  </ItemGroup>

  <!-- gac dependencies for {{ $currentFrameworkName }} -->
  <ItemGroup Condition="'$(TargetFramework)'=='{{ $currentFrameworkName | xmlattrib }}'">
{{-   $_.dependencies | array | where { $_.type -in @('gac', 'dev-gac') } | % { }}
    <Reference Include="{{ $_.name | xmlattrib }}">
      {{- if ($_.hintPath)     { -}}<HintPath>{{ $_.hintPath | xmltext }}</HintPath>{{- } -}}
      {{- if ($_.private)      { -}}<Private>{{ $_.private | bool }}</Private>{{- } -}}
      {{- if ($_.exactVersion) { -}}<SpecificVersion>{{ $_.exactVersion | bool }}</SpecificVersion>{{- } -}}
    </Reference>
{{    } -}}
  </ItemGroup>

  <!-- dependency packages for {{ $currentFrameworkName }} -->
  <ItemGroup Condition="'$(TargetFramework)'=='{{ $currentFrameworkName | xmlattrib }}'">
{{-   $_.dependencies | array | where { 
        ($_.type -in @('package', 'dev-package')) -and 
        ((-not $_.configuration) -or ($_.configuration -eq '*')) 
} | % { }}
    <PackageReference Include="{{ $_.name | xmlattrib }}" Version="{{ $_.version | xmlattrib }}"{{ if ($_.type -eq 'dev-package') { }} PrivateAssets="All"{{ } }} />
{{-   } }}
  </ItemGroup>
  <ItemGroup Condition="('$(TargetFramework)'=='{{ $currentFrameworkName | xmlattrib }}') And ('$(Configuration)'=='Debug')">
{{-   $_.dependencies | array | where { 
        ($_.type -in @('package', 'dev-package')) -and 
        ($_.configuration -eq 'debug') 
} | % { }}
    <PackageReference Include="{{ $_.name | xmlattrib }}" Version="{{ $_.version | xmlattrib }}"{{ if ($_.type -eq 'dev-package') { }} PrivateAssets="All"{{ } }} />
{{-   } }}
  </ItemGroup>
  <ItemGroup Condition="('$(TargetFramework)'=='{{ $currentFrameworkName | xmlattrib }}') And ('$(Configuration)'=='Release')">
{{-   $_.dependencies | array | where { 
        ($_.type -in @('package', 'dev-package')) -and 
        ($_.configuration -eq 'release') 
} | % { }}
    <PackageReference Include="{{ $_.name | xmlattrib }}" Version="{{ $_.version | xmlattrib }}"{{ if ($_.type -eq 'dev-package') { }} PrivateAssets="All"{{ } }} />
{{-   } }}
  </ItemGroup>

{{ } }}
  <!-- end frameworks -->

  <!-- SDK customization -->
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />
</Project>
